SELECT * FROM hasan.customers;
-- list all unique cities where customers are located
select distinct (customer_city) from customers;
-- count the number of orders palaced in 2017.
select count(order_id) from orders
where year(order_purchase_timestamp)=2017;

-- Find the total sales per category.
select products.product_category as category,round(sum(payments.payment_value),2) from products join 
order_items on products.product_id=order_items.product_id 
join payments on order_items.order_id=payments.order_id
group by category; 
-- count the number of customers from each state 
select customer_state , count(customers.customer_unique_id) from customers
group by customer_state;
-- --calculate the number of orders of per month in 2018
select monthname(order_purchase_timestamp)  months, count(order_id)
from orders
where year(order_purchase_timestamp)=2018
group by months; 
-- find the average number of products per order grouped by customer city
with count_per_order as
(select orders.order_id,orders.customer_id, count(order_items.order_id)
as oc
from orders join order_items
on orders.order_id=order_items.order_id 
group by orders.order_id,orders.customer_id)
select customers.customer_city ,round(avg(count_per_order.oc),2)
from customers join count_per_order
on customers.customer_id=count_per_order.customer_id
group by customers.customer_city;

-- calculate the percentege of total revenue contributed by each product category

select products.product_category as category,round(sum(payments.payment_value)/(select sum(payments.payment_value)
 from payments)*100,2)as percentege  from products join 
order_items on products.product_id=order_items.product_id 
join payments on order_items.order_id=payments.order_id
group by category order by percentege desc;

-- identify the correlation between product price and the number of times a product has been purchased
select products.product_category,count(order_items.product_id), round(avg(order_items.price),2)
from products join order_items on
products.product_id=order_items.product_id
group by products.product_category;
-- calculate the total revenue generated by each seller , and rank them by revenue
select *, dense_rank() over(order by revenue desc) as rn from (select order_items.seller_id,sum(payments.payment_value)
revenue from order_items join payments
on order_items.order_id=payments.order_id 
group by order_items.seller_id) as a;
-- calculate the moving average of order values for each customer over their order history
select customer_id, order_purchase_timestamp, payment,
avg(payment) over(partition by customer_id  order by order_purchase_timestamp
rows between 2 preceding and current row ) as mov_avg
from (select orders.customer_id, orders.order_purchase_timestamp,
payments.payment_value as payment from payments join orders
on payments.order_id= orders.order_id) as a;